{"version":3,"file":"sesion.service.js","sourceRoot":"","sources":["sesion.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, OnInit } from 'angular2/core';\r\nimport { Http, RequestOptions, Headers } from 'angular2/http';\r\nimport 'rxjs/Rx';\r\nimport { Usuario } from './usuario.model';\r\n\r\n\r\n@Injectable()\r\nexport class SesionService {\r\n  //Variables\r\n\tisLogged = false;\r\n\tisAdmin = false;\r\n\tuser: Usuario;\r\n\tactual: Usuario;\r\n  //Constructor\r\n\tconstructor(private http: Http){\r\n\t\tthis.reqIsLogged();\r\n\t}\r\n  //Metodos\r\n  getSesion(){\r\n    return Promise.resolve(this.user);\r\n  }\r\n\tsetSesion(actual: Usuario){\r\n\t\tthis.actual = actual;\r\n\t}\r\n\treqIsLogged(){\r\n    let headers = new Headers({\r\n\t\t\t'X-Requested-With': 'XMLHttpRequest'\r\n\t\t});\r\n    let options = new RequestOptions({headers});\r\n    this.http.get('logIn', options).subscribe(\r\n\t\t\tresponse => this.processLogInResponse(response),\r\n\t\t\terror => {\r\n\t\t\t\tif(error.status != 401){\r\n\t\t\t\t\tconsole.error(\"Error when asking if logged: \"+ JSON.stringify(error));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n  getLogged(){\r\n    return this.isLogged;\r\n  }\r\n\r\n\tprivate processLogInResponse(response){\r\n\t\tthis.isLogged = true;\r\n\t\tthis.user = response.json();\r\n\t\tthis.isAdmin = this.user.roles.indexOf(\"ROLE_ADMIN\") !== -1;\r\n\t}\r\n\r\n\tlogIn(user: string, pass: string) {\r\n    let userPass = user + \":\" + pass;\r\n    let headers = new Headers({\r\n\t\t\t'Authorization': 'Basic '+utf8_to_b64(userPass),\r\n\t\t\t'X-Requested-With': 'XMLHttpRequest'\r\n\t\t});\r\n    let options = new RequestOptions({headers});\r\n    return this.http.get('logIn', options).map(\r\n\t\t\tresponse => {\r\n\t\t\t\tthis.processLogInResponse(response);\r\n\t\t\t\treturn this.user;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\tlogOut(){\r\n    return this.http.get('logOut').map(\r\n\t\t\tresponse => {\r\n\t\t\t\tthis.isLogged = false;\r\n\t\t\t\tthis.isAdmin = false;\r\n\t\t\t\treturn response;\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction utf8_to_b64(str) {\r\n    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function(match, p1) {\r\n        return String.fromCharCode(<any>'0x' + p1);\r\n    }));\r\n}\r\n"]}
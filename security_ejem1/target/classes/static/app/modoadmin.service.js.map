{"version":3,"file":"modoadmin.service.js","sourceRoot":"","sources":["modoadmin.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from 'angular2/core';\n\nimport {Prod,infodetalle,comentario} from './clases';\nimport { Usuario } from './usuario.model'\nimport {Contenido} from './contenido.model';\nimport {Http, Headers, RequestOptions} from 'angular2/http';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/Rx';\n\nconst prod_URL = 'https://localhost:8443/productos';\nconst comentarios_URL = 'https://localhost:8443/comentarios';\nconst content_URL = 'https://localhost:8443/contenido';\nconst users_URL = 'https://localhost:8443/usuarios';\n\n@Injectable()\nexport class modoadminservice {\n  constructor(private http: Http) {}\n\n  getProductos (){\n    return this.http.get(prod_URL + '/all')\n      .map(resp => resp.json())\n      .catch(err => this.mostrarError(err));\n  }\n\n  getProductosFiltro(juego:number,series:number,pelis:number){\n    return this.http.get(prod_URL + '/filtro/' + \"/\" + juego  + \"/\" + series  + \"/\" + pelis)\n      .map(resp => resp.json())\n      .catch(err => this.mostrarError(err));\n  }\n\n  getProd (id:number){\n    return this.http.get(prod_URL + '/' + id)\n      .map(resp => resp.json())\n      .catch(err => this.mostrarError(err));\n  }\n\n\n  deleteProd(id:number){\n    return this.http.delete(prod_URL + '/' + id)\n      //.map(resp => resp.json())\n      .catch(err => this.mostrarError(err));\n  }\n  pushProd(produc:Prod){\n    let body = JSON.stringify(produc);\n    let headers = new Headers({\n        'Content-Type': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n    });\n    let options = new RequestOptions({ headers });\n    return this.http.post(prod_URL + '/nuevoproducto',body,options)\n      .map(resp => resp.json())\n      .catch(err => this.mostrarError(err));\n  }\n  getContenido(){\n    return this.http.get(content_URL + '/')\n      .map(resp => resp.json())\n      .catch(err => this.mostrarError(err));\n  }\n\n  deleteContenido(id:number){\n    return this.http.delete(content_URL + '/' + id)\n      .map(resp => resp.json())\n      .catch(err => this.mostrarError(err));\n  }\n\n  pushContenido(content:Contenido){\n    let body = JSON.stringify(content);\n    let headers = new Headers({\n        'Content-Type': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n    });\n    let options = new RequestOptions({ headers });\n    return this.http.post(content_URL + '/',body,options)\n      .map(resp => resp.json())\n      .catch(err => this.mostrarError(err));\n  }\n  getContenidotipo(tipo:string){\n    return this.http.get(content_URL + '/tipo/'+tipo)\n      .map(resp => resp.json())\n      .catch(err => this.mostrarError(err));\n  }\n\n\n\n  deleteUser(id:number){\n    console.log(users_URL + '/' + id);\n    return this.http.delete(users_URL + '/' + id)\n      .map(resp => resp.json())\n      .catch(err => this.mostrarError(err));\n  }\n\n  private mostrarError(error: any){\n    console.error(error);\n    return Observable.throw(\"Server error (\" + error.status + \"): \" + error.text())\n  }\n}\n"]}